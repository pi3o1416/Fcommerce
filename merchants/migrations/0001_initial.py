# Generated by Django 4.2.1 on 2023-06-13 07:41

import dirtyfields.dirtyfields
from django.db import migrations, models
import merchants.models
import merchants.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=200, unique=True, validators=[merchants.validators.UnicodeMerchantNameValidator()], verbose_name='Name')),
                ('merchant_id', models.CharField(max_length=200, unique=True, verbose_name='Merchant ID')),
                ('publish_shop', models.BooleanField(default=False, verbose_name='Publish Shop')),
                ('integrate_facebook', models.BooleanField(default=False, verbose_name='Integrate Facebook')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'merchant',
                'verbose_name_plural': 'merchants',
                'ordering': ['-created_at'],
                'swappable': 'AUTH_USER_MODEL',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
            managers=[
                ('objects', merchants.models.MerchantManager()),
            ],
        ),
    ]
